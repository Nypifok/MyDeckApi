// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDeckAPI.Models;

namespace MyDeckAPI.Migrations
{
    [DbContext(typeof(MDContext))]
    [Migration("20200811020429_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyDeckAPI.Models.Card", b =>
                {
                    b.Property<Guid>("Card_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Answer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Parent_Deck_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Question")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Card_Id");

                    b.HasIndex("Answer");

                    b.HasIndex("Parent_Deck_Id");

                    b.HasIndex("Question");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MyDeckAPI.Models.Category", b =>
                {
                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Category_Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Category_Name = "Math",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 888, DateTimeKind.Utc).AddTicks(4837)
                        },
                        new
                        {
                            Category_Name = "Foreign Languages",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 888, DateTimeKind.Utc).AddTicks(6615)
                        },
                        new
                        {
                            Category_Name = "Chemistry",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 888, DateTimeKind.Utc).AddTicks(6661)
                        },
                        new
                        {
                            Category_Name = "Art",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 888, DateTimeKind.Utc).AddTicks(6664)
                        },
                        new
                        {
                            Category_Name = "IT",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 888, DateTimeKind.Utc).AddTicks(6666)
                        },
                        new
                        {
                            Category_Name = "Others",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 888, DateTimeKind.Utc).AddTicks(6667)
                        });
                });

            modelBuilder.Entity("MyDeckAPI.Models.Deck", b =>
                {
                    b.Property<Guid>("Deck_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Others");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid>("Icon")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Deck_Id");

                    b.HasIndex("Category_Name");

                    b.HasIndex("Icon");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("MyDeckAPI.Models.File", b =>
                {
                    b.Property<Guid>("File_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("File_Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MyDeckAPI.Models.Role", b =>
                {
                    b.Property<string>("Role_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Role_Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Role_Name = "Owner",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 895, DateTimeKind.Utc).AddTicks(737)
                        },
                        new
                        {
                            Role_Name = "Administrator",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 895, DateTimeKind.Utc).AddTicks(2043)
                        },
                        new
                        {
                            Role_Name = "Support",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 895, DateTimeKind.Utc).AddTicks(2075)
                        },
                        new
                        {
                            Role_Name = "Content Maker",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 895, DateTimeKind.Utc).AddTicks(2077)
                        },
                        new
                        {
                            Role_Name = "User",
                            LastUpdate = new DateTime(2020, 8, 11, 2, 4, 28, 895, DateTimeKind.Utc).AddTicks(2079)
                        });
                });

            modelBuilder.Entity("MyDeckAPI.Models.Session", b =>
                {
                    b.Property<Guid>("Session_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Session_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MyDeckAPI.Models.Statistics", b =>
                {
                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Card_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Last_Train")
                        .HasColumnType("datetime2");

                    b.Property<int>("Lvl")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trains")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("User_Id", "Card_Id");

                    b.HasIndex("Card_Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("MyDeckAPI.Models.Subscribe", b =>
                {
                    b.Property<Guid>("Follower_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Publisher_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Subscribe_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Follower_Id", "Publisher_Id");

                    b.HasIndex("Publisher_Id");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("MyDeckAPI.Models.User", b =>
                {
                    b.Property<Guid>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Avatar")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Role_Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("User");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("User_Id");

                    b.HasIndex("Avatar");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role_Name");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyDeckAPI.Models.UserDeck", b =>
                {
                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Deck_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id", "Deck_Id");

                    b.HasIndex("Deck_Id");

                    b.ToTable("UserDecks");
                });

            modelBuilder.Entity("MyDeckAPI.Models.Card", b =>
                {
                    b.HasOne("MyDeckAPI.Models.File", "_Answer")
                        .WithMany("Answers")
                        .HasForeignKey("Answer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.Deck", "Parent_Deck")
                        .WithMany("Cards")
                        .HasForeignKey("Parent_Deck_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.File", "_Question")
                        .WithMany("Questions")
                        .HasForeignKey("Question")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDeckAPI.Models.Deck", b =>
                {
                    b.HasOne("MyDeckAPI.Models.Category", "Category")
                        .WithMany("Decks")
                        .HasForeignKey("Category_Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.File", "_Icon")
                        .WithMany("Decks")
                        .HasForeignKey("Icon")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDeckAPI.Models.Session", b =>
                {
                    b.HasOne("MyDeckAPI.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDeckAPI.Models.Statistics", b =>
                {
                    b.HasOne("MyDeckAPI.Models.Card", "Card")
                        .WithMany("Statistics")
                        .HasForeignKey("Card_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.User", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDeckAPI.Models.Subscribe", b =>
                {
                    b.HasOne("MyDeckAPI.Models.User", "Follower")
                        .WithMany("Publishers")
                        .HasForeignKey("Follower_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.User", "Publisher")
                        .WithMany("Followers")
                        .HasForeignKey("Publisher_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDeckAPI.Models.User", b =>
                {
                    b.HasOne("MyDeckAPI.Models.File", "_Avatar")
                        .WithMany("Users")
                        .HasForeignKey("Avatar")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Name");
                });

            modelBuilder.Entity("MyDeckAPI.Models.UserDeck", b =>
                {
                    b.HasOne("MyDeckAPI.Models.Deck", "Deck")
                        .WithMany("UserDecks")
                        .HasForeignKey("Deck_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDeckAPI.Models.User", "User")
                        .WithMany("UserDecks")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
